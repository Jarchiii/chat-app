{"version":3,"sources":["Events.js","Factories.js","components/LoginForm.jsx","components/chats/SideBarOption.jsx","components/chats/SideBar.jsx","components/chats/ChatHeading.jsx","components/chats/Messages.jsx","components/chats/MessageInput.jsx","components/chats/ChatContainer.jsx","components/Layout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","COMMUNITY_CHAT","USER_CONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","LOGOUT","PRIVATE_MESSAGE","NEW_CHAT_USER","uuid","require","createChatNameFromUsers","users","excludedUser","filter","u","join","getTime","date","getHours","getMinutes","slice","createMessage","message","sender","id","time","Date","now","createChat","messages","name","isCommunity","typingUsers","createUser","socketId","LoginForm","props","setUser","user","isUser","console","log","setError","handleSubmit","e","preventDefault","socket","nickname","state","emit","handleChange","setState","target","value","error","this","className","onSubmit","htmlFor","ref","input","textInput","type","onChange","placeholder","Component","SideBarOption","lastMessage","active","onClick","toUpperCase","defaultProps","SideBar","reciever","onSendPrivateMessage","addChatForUser","setActiveSideBar","CHATS","activeSideBar","chats","activeChat","setActiveChat","logout","USERS","refs","map","chat","key","get","last","differenceBy","otherUser","title","ChatHeading","numberOfUsers","Messages","scrollDown","bind","container","scrollTop","scrollHeight","prevProps","prevState","mes","MessageInput","sendMessage","sendTyping","lastUpdateTime","isTyping","startCheckingTyping","typingInterval","setInterval","stopCheckingTyping","clearInterval","autoComplete","onKeyUp","keyCode","disabled","length","ChatContainer","sendOpenPrivateMessage","addUserToChat","chatId","newUser","newChats","Object","assign","removeUsersFromChat","removedUsers","newUsers","difference","resetChat","addChat","reset","messageEvent","typingEvent","on","updateTypingInChat","addMessageToChat","push","includes","initSocket","off","values","Layout","io","reconnect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9ecce5ad.chunk.js","sourcesContent":["module.exports = {\n    COMMUNITY_CHAT: \"COMMUNITY_CHAT\",\n    USER_CONNECTED: \"USER_CONNECTED\",\n    MESSAGE_RECIEVED: \"MESSAGE_RECIEVED\",\n    MESSAGE_SENT: \"MESSAGE_SENT\",\n    USER_DISCONNECTED: \"USER_DISCONNECTED\",\n    TYPING: \"TYPING\",\n    VERIFY_USER: \"VERIFY_USER\",\n    LOGOUT: \"LOGOUT\",\n    PRIVATE_MESSAGE:\"PRIVATE_MESSAGE\",\n    NEW_CHAT_USER : \"NEW_CHAT_USER\"\n}","const { uuid } = require('uuidv4');\n\nconst createUser = ({name=\"\", socketId = null} = {})=>(\n\n    {\n        id:uuid(), \n        name,\n        socketId\n    }\n)\n\n\n\nconst createMessage = ({message=\"\", sender=\"\"}= {} ) => (\n    {\n        id:uuid(),\n        time: getTime(new Date(Date.now())),\n        message,\n        sender\n    }\n)\n\n\n\nconst createChat = ({messages=[], name = \"Community\", users=[], isCommunity = false}= {})=>(\n{\n    id:uuid(),\n    name: isCommunity ? \"Community\" : createChatNameFromUsers(users),\n    messages,\n    users,\n    typingUsers:[],\n    isCommunity\n\n})\n\n\nconst createChatNameFromUsers = (users, excludedUser =\"\") => {\n   return users.filter(u => u!== excludedUser).join(' & ') || \"Empty Users\"\n}\n\n\n\n\n\n\nconst getTime = (date) => {\n    return `${date.getHours()}:${(\"0\"+date.getMinutes()).slice(-2)}`\n}\n\nmodule.exports ={\n    createMessage,\n    createChat,\n    createUser,\n    createChatNameFromUsers\n}\n\n\n ","import React, { Component } from 'react'\nimport { VERIFY_USER } from '../Events'\n\nexport class LoginForm extends Component {\nconstructor(props){\n    super(props);\n    this.state = {\n        nickname:\"\",\n        error:\"\"\n    };\n}\n\nsetUser = ({user, isUser}) => {\n    console.log(user, isUser)\n    if(isUser){\n        this.setError(\"User name taken\")\n    } else {\n        this.setError(\"\")\n        this.props.setUser(user)\n\n    }\n}\n\nhandleSubmit = (e) => {\n        e.preventDefault()\n        const { socket } = this.props\n        const { nickname } = this.state\n        socket.emit(VERIFY_USER , nickname, this.setUser)\n}\n\nhandleChange = (e) => {\n     this.setState({nickname:e.target.value})\n}\n\nsetError = (error) => {\n    this.setState({error})\n}\n\n\n\n    render() {\n        const { nickname, error} = this.state\n        return (\n            <div className=\"login\">\n                <form onSubmit={this.handleSubmit} className=\"login-form\">\n                   \n\n                    <label htmlFor=\"nickname\">\n                        <h2>Got a nickname?</h2>\n                    </label>\n                    <input\n                         ref={(input)=>{this.textInput = input}} \n                         type=\"text\"\n                         id=\"nickname\"\n                         value={nickname}\n                         onChange={this.handleChange}\n                         placeholder={'MYCoolUsername'}\n                        />\n                         <button>ok</button>\n                        <div className=\"error\">{error ? error:null}</div>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default LoginForm\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class SideBarOption   extends Component {\n    static propTypes ={\n        name: PropTypes.string.isRequired,\n        lastMessage : PropTypes.string,\n        active: PropTypes.bool,\n        onClick: PropTypes.func\n\n    }\n\n    static defaultProps = {\n        lastMessage : \"\",\n        active: false,\n        onClick : () => {}\n    }\n\n\n\n\n    render() {\n        const {name, lastMessage, active, onClick} = this.props\n        return (\n            <div  \n            className={`user ${active ? 'active' : ''}`}\n            onClick={ onClick  }\n            >\n            <div className=\"user-photo\">{name[0].toUpperCase()}</div>\n            <div className=\"user-info\">\n                <div className=\"name\">{name}</div>\n                {lastMessage && <div className=\"last-message\">{lastMessage}</div>}\n            </div>\n            \n        </div>\n        )\n    }\n}\n\nexport default SideBarOption\n","import React, { Component } from 'react';\nimport SideBarOption from './SideBarOption'\nimport { get, last, differenceBy } from 'lodash'\nimport { createChatNameFromUsers } from '../../Factories';\n\n\nexport default class SideBar extends Component{\n\tstatic type = {\n\t\tUSERS:\"users\",\n\t\tCHATS:\"chats\"\n\t}\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\treciever:\"\",\n\t\t\tactiveSideBar: SideBar.type.CHATS\n\t\t}\n\t}\n\thandleSubmit = (e) => {\n\t\te.preventDefault()\n\t\tconst { reciever } = this.state\n\t\tconst { onSendPrivateMessage } = this.props\n\n\t\tonSendPrivateMessage(reciever)\n\t\tthis.setState({reciever:\"\"})\n\t}\n\n\taddChatForUser = (reciever) => {\n\t\tthis.props.onSendPrivateMessage(reciever)\n\t\tthis.setActiveSideBar(SideBar.type.CHATS)\n\t}\n\tsetActiveSideBar = (type) => {\n\t\tthis.setState({ activeSideBar:type })\n\t}\n\n\t\t\n\trender(){\n\t\tconst { chats, activeChat, user, setActiveChat, logout, users } = this.props\n\t\tconst { reciever, activeSideBar } = this.state\n\t\treturn (\n\t\t\t<div id=\"side-bar\">\n\t\t\t\t\t<div className=\"heading\">\n\t\t\t\t\t\t<div className=\"app-name\">Our Cool Chat </div>\n\t\t\t\t\t\t<div className=\"menu\">\n\t\t\t\t\t\t\tMenu\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<form onSubmit={this.handleSubmit} className=\"search\">\n\t\t\t\t\t\t<i className=\"search-icon\">Search</i>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\tplaceholder=\"Search\" \n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={reciever}\n\t\t\t\t\t\t\tonChange={(e)=>{ this.setState({reciever:e.target.value}) }}/>\n\t\t\t\t\t\t<div className=\"plus\"></div>\n\t\t\t\t\t</form>\n\t\t\t\t\t<div className=\"side-bar-select\">\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tonClick = { ()=>{ this.setActiveSideBar(SideBar.type.CHATS) } }\n\t\t\t\t\t\t\tclassName={`side-bar-select__option ${ activeSideBar === SideBar.type.CHATS ? 'active':''}`}>\n\t\t\t\t\t\t\t<span>Chats</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tonClick = { ()=>{ this.setActiveSideBar(SideBar.type.USERS) } }\n\t\t\t\t\t\t\tclassName={`side-bar-select__option ${ activeSideBar === SideBar.type.USERS ? 'active':''}`}>\n\t\t\t\t\t\t\t<span>Users</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div \n\t\t\t\t\t\tclassName=\"users\" \n\t\t\t\t\t\tref='users' \n\t\t\t\t\t\tonClick={(e)=>{ (e.target === this.refs.user) && setActiveChat(null) }}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{\n\t\t\t\t\t\tactiveSideBar === SideBar.type.CHATS ?\n\t\t\t\t\t\tchats.map((chat)=>{\n\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t<SideBarOption \n\t\t\t\t\t\t\t\t\tkey = {chat.id}\n\t\t\t\t\t\t\t\t\tlastMessage = { get(last(chat.messages), 'message', '') }\n\t\t\t\t\t\t\t\t\tname = { chat.isCommunity ? chat.name : createChatNameFromUsers(chat.users, user.name) }\n\t\t\t\t\t\t\t\t\tactive = { activeChat.id === chat.id }\n\t\t\t\t\t\t\t\t\tonClick = { ()=>{ this.props.setActiveChat(chat) } }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\tdifferenceBy(users, [user], 'name').map((otherUser)=>{\n\t\t\t\t\t\t\t\treturn <SideBarOption \n\t\t\t\t\t\t\t\t\tkey = { otherUser.id }\n\t\t\t\t\t\t\t\t\tname = { otherUser.name }\n\t\t\t\t\t\t\t\t\tonClick = { ()=>{ this.addChatForUser(otherUser.name) }  }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"current-user\">\n\t\t\t\t\t\t<span>{user.name}</span>\n\t\t\t\t\t\t<div onClick={()=>{logout()}} title=\"Logout\" className=\"logout\">\n\t\t\t\t\t\t\tLogout\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t\n\t}\n}","import React from 'react'\n\nfunction ChatHeading({name, numberOfUsers}) {\n\n    return (\n      <div className=\"chat-header\">\n          <div className=\"user-info\">\n              <div className=\"user-name\">{name}</div>\n              <div className=\"status\">\n                  <div className=\"indicator\"></div>\n                  <span>{numberOfUsers ? numberOfUsers : null}</span>\n              </div>\n          </div>\n          <div className=\"option\">\n              \n          </div>\n      </div>\n    )\n}\n\nexport default ChatHeading\n","import React, { Component } from 'react'\n\nexport class Messages extends Component {\n    constructor(props){\n        super(props);\n        this.scrollDown = this.scrollDown.bind(this)\n    }\n\n    scrollDown(){\n        const { container} = this.refs\n        container.scrollTop = container.scrollHeight\n    }\n\n    componentDidMount(){\n        this.scrollDown()\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        this.scrollDown()\n    }\n\n\n\n    render() {\n        const { messages, user, typingUsers } = this.props\n        return (\n            <div ref='container'\n            className=\"thread-container\">\n                <div className=\"thread\">\n                    {\n                        messages.map((mes )=>{\n                            return (\n                                <div\n                                    key={mes.id}\n                                    className={`message-container ${mes.sender === user.name && 'right'}`}\n                                    >\n                                <div className=\"time\">{mes.time}</div>\n                                <div className=\"data\">\n                                    <div className=\"message\">{mes.message}</div>\n                                    <div className=\"name\">{mes.sender}</div>\n                                </div>\n                             </div>\n                                \n\n                            )\n                        })\n                    }\n                    {\n                        typingUsers.map((name)=>{\n                            return <div key={name} className=\"typing-users\">\n                                {`${name} is typing...`}\n                            </div>\n                        })\n                    }\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default Messages\n","import React, { Component } from 'react'\n\nexport class MessageInput extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            message:\"\",\n            isTyping:false\n        };\n\n    }\n\n    handleSubmit = (e)=> {\n        e.preventDefault()\n        this.sendMessage()\n        this.setState({message:\"\"})\n    }\n\n    sendMessage = () => {\n        this.props.sendMessage(this.state.message)\n    }\n\n    componentWillUnmount() {\n        this.stopCheckingTyping()\n      }\n  \n      sendTyping = () =>{\n          console.log(\"ici\")\n          this.lastUpdateTime = Date.now()\n          if(!this.state.isTyping){\n              this.setState({isTyping:true})\n              this.props.sendTyping(true)\n              this.startCheckingTyping()\n          }\n      }\n  \n      /*\n      *\tstartCheckingTyping\n      *\tStart an interval that checks if the user is typing.\n      */\n      startCheckingTyping = ()=>{\n          console.log(\"Typing\");\n          this.typingInterval = setInterval(()=>{\n              if((Date.now() - this.lastUpdateTime) > 300){\n                  this.setState({isTyping:false})\n                  this.stopCheckingTyping()\n              }\n          }, 300)\n      }\n\n      stopCheckingTyping = ()=>{\n\t\tconsole.log(\"Stop Typing\");\n\t\tif(this.typingInterval){\n\t\t\tclearInterval(this.typingInterval)\n\t\t\tthis.props.sendTyping(false)\n\t\t}\n\t}\n\n\n\n    render() {\n        let {message} = this.state\n        return (\n            <div className=\"message-input\">\n                <form\n                    onSubmit={this.handleSubmit}\n                    className=\"message-form\">\n                    \n                    <input\n                        id= \"message\"\n                        ref = {\"messageinput\"}\n                        type =\"text\"\n                        className = \"form-control\"\n                        value = {message}\n                        autoComplete={'off'}\n                        placeholder= \"Type something interesting\"\n                        onKeyUp = { e => {  e.keyCode !== 13 && this.sendTyping() }}\n                        onChange = {\n                            ({target}) => {\n                                this.setState({message:target.value})\n                            }\n                        }\n                    \n                   />\n                    <button\n                     disabled = {message.length < 1}\n                     type = \"submit\"\n                     className = \"send\">\n                         Send\n                     </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default MessageInput\n","import React, { Component } from 'react'\nimport SideBar from './SideBar'\nimport { MESSAGE_SENT, COMMUNITY_CHAT, MESSAGE_RECIEVED , TYPING, PRIVATE_MESSAGE, USER_CONNECTED, USER_DISCONNECTED, NEW_CHAT_USER} from '../../Events'\n\nimport ChatHeading from './ChatHeading'\nimport Messages from './Messages'\nimport MessageInput from './MessageInput'\nimport { values, difference, differenceBy } from 'lodash'\n\n\nexport class ChatContainer extends Component {\n    constructor (props){\n        super(props)\n        this.state ={\n            chats:[],\n            activeChat:null,\n            users:[\"fu\", \"bar\"]\n        }\n    }\n\n    componentDidMount(){\n        const {socket} = this.props\n        this.initSocket(socket)\n    }\n    componentWillUnmount() {\n\t\tconst { socket } = this.props\n\t\tsocket.off(PRIVATE_MESSAGE)\n\t\tsocket.off(USER_CONNECTED)\n        socket.off(USER_DISCONNECTED)\n        socket.off(NEW_CHAT_USER)\n\t}\n\t\n\tinitSocket(socket){\n\t\tsocket.emit(COMMUNITY_CHAT, this.resetChat)\n\t\tsocket.on(PRIVATE_MESSAGE, this.addChat)\n\t\tsocket.on('connect', ()=>{\n\t\t\tsocket.emit(COMMUNITY_CHAT, this.resetChat)\n\t\t})\n\t\tsocket.on(USER_CONNECTED, (users)=>{\n\t\t\tthis.setState({ users: values(users) })\n\t\t})\n\t\tsocket.on(USER_DISCONNECTED, (users)=>{\n            const removedUsers = differenceBy( this.state.users, values (users))\n            this.removeUsersFromChat(removedUsers)\n\t\t\tthis.setState({ users: values(users) })\t\t\t\n        })\n        socket.on(NEW_CHAT_USER, this.addUserToChat)\n\t}\n\n    sendOpenPrivateMessage = (reciever) =>{ \n        const { user, socket } = this.props\n\n        socket.emit(PRIVATE_MESSAGE, {reciever, sender:user.name})\n    }\n\n    addUserToChat = ({ chatId, newUser}) => {\n        const  { chats } =this.state\n        const newChats = chats.map(chat =>{\n            if (chat.id === chatId){\n                return Object.assign({}, chat, {users : [...chat.users, newUser ]})\n            }\n            return chat\n        })\n        this.setState({chats: newChats})\n    }\n\n    removeUsersFromChat = removedUsers => {\n        const { chats } = this.state\n        const newChats = chats.map(chat => {\n            let newUsers = difference(chat.users, removedUsers.map(u =>u.name))\n            return Object.assign({}, chat, {users:newUsers})\n        })\n        this.setState({chats: newChats})\n\n    }\n\n\n    resetChat= (chat) => {\n        return this.addChat(chat,true)\n    }\n\n    addChat = (chat, reset) => {\n        const {socket} = this.props\n        const { chats } =this.state\n        const newChats = reset ? [chat] : [...chats,chat]\n        this.setState({chats:newChats, activeChat:reset ? chat : this.state.activeChat})\n\n        const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}` \n        const typingEvent = `${TYPING}-${chat.id}` \n\n        socket.on(typingEvent, this.updateTypingInChat(chat.id))\n        socket.on(messageEvent, this.addMessageToChat(chat.id))\n    }\n\n\n    addMessageToChat = (chatId) => {\n        return message => {\n            const{ chats } = this.state\n            let newChats = chats.map((chat) => {\n                if (chat.id === chatId)\n                   chat.messages.push(message)\n                return chat\n            })\n            this.setState({chats:newChats})\n        }\n\n    }\n\n    updateTypingInChat = (chatId) => {\n        return ({isTyping, user})=> {\n            if (user !==this.props.user.name){\n                const {chats} = this.state\n                let newChats = chats.map((chat)=>{\n                    if (chat.id === chatId){\n                        if (isTyping && !chat.typingUsers.includes(user)){\n                            chat.typingUsers.push(user)\n                        } else if (!isTyping && chat.typingUsers.includes(user)){\n                            chat.typingUsers = chat.typingUsers.filter(u => u !== user)\n\n                        }\n                    }\n\n                    return chat\n                })\n                this.setState({chats:newChats})\n            }\n        }\n\n    }\n\n\n    sendMessage = (chatId, message) => {\n        const { socket} = this.props\n        socket.emit(MESSAGE_SENT, {chatId, message})\n    }\n\n    sendTyping = (chatId, isTyping) => {\n        const { socket} = this.props\n        socket.emit(TYPING, {chatId, isTyping})\n    }\n    setActiveChat = (activeChat) => {\n        this.setState({activeChat})\n    }\n\n\n\n    render() {\n        const { user, logout } = this.props\n        const { chats, activeChat, users  } = this.state\n        return (\n            <div className=\"container\">\n                <SideBar\n                  logout={logout}\n                  chats={chats}\n                  users={users}\n                  user={user}\n                  activeChat={activeChat}\n                  setActiveChat={this.setActiveChat}\n                  onSendPrivateMessage={this.sendOpenPrivateMessage}\n                  />\n\n                <div className=\"chat-room-container\"> \n                {\n                    this.state.activeChat !== null ? (\n                        <div className=\"chat-room\">\n                            <ChatHeading name={activeChat.name}/>\n                             <Messages \n                                    messages={activeChat.messages}\n                                    user={user}\n                                    typingUsers={activeChat.typingUsers}\n                                />\n\n                            <MessageInput\n                                sendMessage={\n                                    (message)=> {\n                                        this.sendMessage(activeChat.id, message)\n                                    }\n                                }\n                                sendTyping={\n                                    (isTyping)=>{\n                                        this.sendTyping(activeChat.id, isTyping)\n                                    }\n                                }\n                                />\n                            </div>\n                    ) : ( \n                    <div className=\"chat-room-choose\"> \n                    <h3>Choose your chat !</h3>\n                    \n                    </div>)\n                }\n                \n                \n                \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ChatContainer\n","import React, { Component } from 'react'\nimport io from 'socket.io-client'\nimport {USER_CONNECTED, LOGOUT, VERIFY_USER} from '../Events'\nimport LoginForm from './LoginForm'\nimport ChatContainer from './chats/ChatContainer'\nconst socketUrl = \"/\"\n\nexport class Layout extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            socket: null,\n            user:null\n        };\n    }\n\n    componentWillMount(){\n        this.initSocket()\n    }\n\n    initSocket = ()  => {\n        const socket = io(socketUrl)\n        socket.on('connect', () =>{\n            if (this.state.user){\n            this.reconnect(socket)\n            }else {\n                console.log(\"connected\");\n            }\n           \n        })\n        this.setState({socket})\n    }\n\n    reconnect = (socket) => {\n        socket.emit(VERIFY_USER, this.state.user.name, ({isUser, user}) => {\n            if(isUser){\n                this.setState({user:null})\n            } else {\n                this.setUser(user)\n            }\n        })\n    }\n\n\n\n\nsetUser = (user) =>{\n    const {socket} = this.state\n    socket.emit(USER_CONNECTED, user);\n    this.setState({user})\n}\n\nlogout = () =>{\n    const {socket} = this.state\n    socket.emit(LOGOUT)\n    this.setState({user:null})\n}\n\n\n\n  \n    render() {\n        const { socket , user} = this.state\n        return (\n            <div className=\"container\">\n                {\n                    !user ?   <LoginForm socket={socket} setUser={this.setUser}/> \n                    :\n                    <ChatContainer socket={socket} user={user} logout={this.logout} />\n\n                }\n            </div>\n        ) \n    }\n}\n\nexport default Layout\n","import React from 'react';\nimport Layout from './components/Layout'\nimport './index.scss'\nfunction App() {\n  return (\n      <Layout title=\"Chat App BAby\"/>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}